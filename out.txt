Module(body=[ImportFrom(module='__future__', names=[alias(name='unicode_literals', asname=None)], level=0, lineno=1, col_offset=0), Import(names=[alias(name='re', asname=None)], lineno=2, col_offset=0), Import(names=[alias(name='string', asname=None)], lineno=3, col_offset=0), Import(names=[alias(name='sys', asname=None)], lineno=4, col_offset=0), Import(names=[alias(name='functools', asname=None)], lineno=5, col_offset=0), Import(names=[alias(name='heapq', asname=None)], lineno=6, col_offset=0), Import(names=[alias(name='logging', asname=None)], lineno=7, col_offset=0), ImportFrom(module='functools', names=[alias(name='partial', asname=None)], level=0, lineno=8, col_offset=0), Import(names=[alias(name='platform', asname=None)], lineno=9, col_offset=0), Import(names=[alias(name='warnings', asname=None)], lineno=10, col_offset=0), ImportFrom(module='difflib', names=[alias(name='SequenceMatcher', asname=None)], level=0, lineno=11, col_offset=0), Assign(targets=[Name(id='PY3', ctx=Store(), lineno=13, col_offset=0)], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load(), lineno=13, col_offset=6), attr='version_info', ctx=Load(), lineno=13, col_offset=6), slice=Index(value=Num(n=0, lineno=13, col_offset=23)), ctx=Load(), lineno=13, col_offset=6), ops=[Eq()], comparators=[Num(n=3, lineno=13, col_offset=29)], lineno=13, col_offset=6), lineno=13, col_offset=0), If(test=Name(id='PY3', ctx=Load(), lineno=14, col_offset=3), body=[Assign(targets=[Name(id='string', ctx=Store(), lineno=15, col_offset=4)], value=Name(id='str', ctx=Load(), lineno=15, col_offset=13), lineno=15, col_offset=4)], orelse=[], lineno=14, col_offset=0), ClassDef(name='StringProcessor', bases=[Name(id='object', ctx=Load(), lineno=18, col_offset=22)], keywords=[], body=[Expr(value=Str(s='\n    This class defines method to process strings in the most\n    efficient way. Ideally all the methods below use unicode strings\n    for both input and output.\n    ', lineno=23, col_offset=-1), lineno=23, col_offset=-1), Assign(targets=[Name(id='regex', ctx=Store(), lineno=25, col_offset=4)], value=Call(func=Attribute(value=Name(id='re', ctx=Load(), lineno=25, col_offset=12), attr='compile', ctx=Load(), lineno=25, col_offset=12), args=[Str(s='(?ui)\\W', lineno=25, col_offset=23)], keywords=[], lineno=25, col_offset=12), lineno=25, col_offset=4), FunctionDef(name='replace_non_letters_non_numbers_with_whitespace', args=arguments(args=[arg(arg='cls', annotation=None, lineno=28, col_offset=56), arg(arg='a_string', annotation=None, lineno=28, col_offset=61)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n        This function replaces any sequence of non letters and non\n        numbers with a single white space.\n        ', lineno=32, col_offset=-1), lineno=32, col_offset=-1), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load(), lineno=33, col_offset=15), attr='regex', ctx=Load(), lineno=33, col_offset=15), attr='sub', ctx=Load(), lineno=33, col_offset=15), args=[Str(s=' ', lineno=33, col_offset=29), Name(id='a_string', ctx=Load(), lineno=33, col_offset=34)], keywords=[], lineno=33, col_offset=15), lineno=33, col_offset=8)], decorator_list=[Name(id='classmethod', ctx=Load(), lineno=27, col_offset=5)], returns=None, lineno=27, col_offset=4), Assign(targets=[Name(id='strip', ctx=Store(), lineno=35, col_offset=4)], value=Call(func=Name(id='staticmethod', ctx=Load(), lineno=35, col_offset=12), args=[Attribute(value=Name(id='string', ctx=Load(), lineno=35, col_offset=25), attr='strip', ctx=Load(), lineno=35, col_offset=25)], keywords=[], lineno=35, col_offset=12), lineno=35, col_offset=4), Assign(targets=[Name(id='to_lower_case', ctx=Store(), lineno=36, col_offset=4)], value=Call(func=Name(id='staticmethod', ctx=Load(), lineno=36, col_offset=20), args=[Attribute(value=Name(id='string', ctx=Load(), lineno=36, col_offset=33), attr='lower', ctx=Load(), lineno=36, col_offset=33)], keywords=[], lineno=36, col_offset=20), lineno=36, col_offset=4), Assign(targets=[Name(id='to_upper_case', ctx=Store(), lineno=37, col_offset=4)], value=Call(func=Name(id='staticmethod', ctx=Load(), lineno=37, col_offset=20), args=[Attribute(value=Name(id='string', ctx=Load(), lineno=37, col_offset=33), attr='upper', ctx=Load(), lineno=37, col_offset=33)], keywords=[], lineno=37, col_offset=20), lineno=37, col_offset=4)], decorator_list=[], lineno=18, col_offset=0), FunctionDef(name='validate_string', args=arguments(args=[arg(arg='s', annotation=None, lineno=39, col_offset=20)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='\n    Check input has length and that length > 0\n\n    :param s:\n    :return: True if len(s) > 0 else False\n    ', lineno=45, col_offset=-1), lineno=45, col_offset=-1), Try(body=[Return(value=Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=47, col_offset=15), args=[Name(id='s', ctx=Load(), lineno=47, col_offset=19)], keywords=[], lineno=47, col_offset=15), ops=[Gt()], comparators=[Num(n=0, lineno=47, col_offset=24)], lineno=47, col_offset=15), lineno=47, col_offset=8)], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load(), lineno=48, col_offset=11), name=None, body=[Return(value=NameConstant(value=False, lineno=49, col_offset=15), lineno=49, col_offset=8)], lineno=48, col_offset=4)], orelse=[], finalbody=[], lineno=46, col_offset=4)], decorator_list=[], returns=None, lineno=39, col_offset=0), FunctionDef(name='check_for_none', args=arguments(args=[arg(arg='func', annotation=None, lineno=52, col_offset=19)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[FunctionDef(name='decorator', args=arguments(args=[], vararg=arg(arg='args', annotation=None, lineno=54, col_offset=19), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None, lineno=54, col_offset=27), defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='args', ctx=Load(), lineno=55, col_offset=11), slice=Index(value=Num(n=0, lineno=55, col_offset=16)), ctx=Load(), lineno=55, col_offset=11), ops=[Is()], comparators=[NameConstant(value=None, lineno=55, col_offset=22)], lineno=55, col_offset=11), Compare(left=Subscript(value=Name(id='args', ctx=Load(), lineno=55, col_offset=30), slice=Index(value=Num(n=1, lineno=55, col_offset=35)), ctx=Load(), lineno=55, col_offset=30), ops=[Is()], comparators=[NameConstant(value=None, lineno=55, col_offset=41)], lineno=55, col_offset=30)], lineno=55, col_offset=11), body=[Return(value=Num(n=0, lineno=56, col_offset=19), lineno=56, col_offset=12)], orelse=[], lineno=55, col_offset=8), Return(value=Call(func=Name(id='func', ctx=Load(), lineno=57, col_offset=15), args=[Starred(value=Name(id='args', ctx=Load(), lineno=57, col_offset=21), ctx=Load(), lineno=57, col_offset=20)], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load(), lineno=57, col_offset=29))], lineno=57, col_offset=15), lineno=57, col_offset=8)], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load(), lineno=53, col_offset=5), attr='wraps', ctx=Load(), lineno=53, col_offset=5), args=[Name(id='func', ctx=Load(), lineno=53, col_offset=21)], keywords=[], lineno=53, col_offset=5)], returns=None, lineno=53, col_offset=4), Return(value=Name(id='decorator', ctx=Load(), lineno=58, col_offset=11), lineno=58, col_offset=4)], decorator_list=[], returns=None, lineno=52, col_offset=0), FunctionDef(name='check_empty_string', args=arguments(args=[arg(arg='func', annotation=None, lineno=61, col_offset=23)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[FunctionDef(name='decorator', args=arguments(args=[], vararg=arg(arg='args', annotation=None, lineno=63, col_offset=19), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None, lineno=63, col_offset=27), defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=64, col_offset=11), args=[Subscript(value=Name(id='args', ctx=Load(), lineno=64, col_offset=15), slice=Index(value=Num(n=0, lineno=64, col_offset=20)), ctx=Load(), lineno=64, col_offset=15)], keywords=[], lineno=64, col_offset=11), ops=[Eq()], comparators=[Num(n=0, lineno=64, col_offset=27)], lineno=64, col_offset=11), Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=64, col_offset=32), args=[Subscript(value=Name(id='args', ctx=Load(), lineno=64, col_offset=36), slice=Index(value=Num(n=1, lineno=64, col_offset=41)), ctx=Load(), lineno=64, col_offset=36)], keywords=[], lineno=64, col_offset=32), ops=[Eq()], comparators=[Num(n=0, lineno=64, col_offset=48)], lineno=64, col_offset=32)], lineno=64, col_offset=11), body=[Return(value=Num(n=0, lineno=65, col_offset=19), lineno=65, col_offset=12)], orelse=[], lineno=64, col_offset=8), Return(value=Call(func=Name(id='func', ctx=Load(), lineno=66, col_offset=15), args=[Starred(value=Name(id='args', ctx=Load(), lineno=66, col_offset=21), ctx=Load(), lineno=66, col_offset=20)], keywords=[keyword(arg=None, value=Name(id='kwargs', ctx=Load(), lineno=66, col_offset=29))], lineno=66, col_offset=15), lineno=66, col_offset=8)], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load(), lineno=62, col_offset=5), attr='wraps', ctx=Load(), lineno=62, col_offset=5), args=[Name(id='func', ctx=Load(), lineno=62, col_offset=21)], keywords=[], lineno=62, col_offset=5)], returns=None, lineno=62, col_offset=4), Return(value=Name(id='decorator', ctx=Load(), lineno=67, col_offset=11), lineno=67, col_offset=4)], decorator_list=[], returns=None, lineno=61, col_offset=0), Assign(targets=[Name(id='bad_chars', ctx=Store(), lineno=70, col_offset=0)], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load(), lineno=70, col_offset=12), args=[Str(s='', lineno=70, col_offset=16)], keywords=[], lineno=70, col_offset=12), attr='join', ctx=Load(), lineno=70, col_offset=12), args=[ListComp(elt=Call(func=Name(id='chr', ctx=Load(), lineno=70, col_offset=26), args=[Name(id='i', ctx=Load(), lineno=70, col_offset=30)], keywords=[], lineno=70, col_offset=26), generators=[comprehension(target=Name(id='i', ctx=Store(), lineno=70, col_offset=37), iter=Call(func=Name(id='range', ctx=Load(), lineno=70, col_offset=42), args=[Num(n=128, lineno=70, col_offset=48), Num(n=256, lineno=70, col_offset=53)], keywords=[], lineno=70, col_offset=42), ifs=[])], lineno=70, col_offset=26)], keywords=[], lineno=70, col_offset=12), lineno=70, col_offset=0), If(test=Name(id='PY3', ctx=Load(), lineno=71, col_offset=3), body=[Assign(targets=[Name(id='translation_table', ctx=Store(), lineno=72, col_offset=4)], value=Call(func=Name(id='dict', ctx=Load(), lineno=72, col_offset=24), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Name(id='ord', ctx=Load(), lineno=72, col_offset=30), args=[Name(id='c', ctx=Load(), lineno=72, col_offset=34)], keywords=[], lineno=72, col_offset=30), NameConstant(value=None, lineno=72, col_offset=38)], ctx=Load(), lineno=72, col_offset=30), generators=[comprehension(target=Name(id='c', ctx=Store(), lineno=72, col_offset=48), iter=Name(id='bad_chars', ctx=Load(), lineno=72, col_offset=53), ifs=[])], lineno=72, col_offset=29)], keywords=[], lineno=72, col_offset=24), lineno=72, col_offset=4), Assign(targets=[Name(id='unicode', ctx=Store(), lineno=73, col_offset=4)], value=Name(id='str', ctx=Load(), lineno=73, col_offset=14), lineno=73, col_offset=4)], orelse=[], lineno=71, col_offset=0), FunctionDef(name='asciionly', args=arguments(args=[arg(arg='s', annotation=None, lineno=76, col_offset=14)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Name(id='PY3', ctx=Load(), lineno=77, col_offset=7), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load(), lineno=78, col_offset=15), attr='translate', ctx=Load(), lineno=78, col_offset=15), args=[Name(id='translation_table', ctx=Load(), lineno=78, col_offset=27)], keywords=[], lineno=78, col_offset=15), lineno=78, col_offset=8)], orelse=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load(), lineno=80, col_offset=15), attr='translate', ctx=Load(), lineno=80, col_offset=15), args=[NameConstant(value=None, lineno=80, col_offset=27), Name(id='bad_chars', ctx=Load(), lineno=80, col_offset=33)], keywords=[], lineno=80, col_offset=15), lineno=80, col_offset=8)], lineno=77, col_offset=4)], decorator_list=[], returns=None, lineno=76, col_offset=0), FunctionDef(name='asciidammit', args=arguments(args=[arg(arg='s', annotation=None, lineno=83, col_offset=16)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load(), lineno=84, col_offset=7), args=[Name(id='s', ctx=Load(), lineno=84, col_offset=12)], keywords=[], lineno=84, col_offset=7), ops=[Is()], comparators=[Name(id='str', ctx=Load(), lineno=84, col_offset=18)], lineno=84, col_offset=7), body=[Return(value=Call(func=Name(id='asciionly', ctx=Load(), lineno=85, col_offset=15), args=[Name(id='s', ctx=Load(), lineno=85, col_offset=25)], keywords=[], lineno=85, col_offset=15), lineno=85, col_offset=8)], orelse=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load(), lineno=86, col_offset=9), args=[Name(id='s', ctx=Load(), lineno=86, col_offset=14)], keywords=[], lineno=86, col_offset=9), ops=[Is()], comparators=[Name(id='unicode', ctx=Load(), lineno=86, col_offset=20)], lineno=86, col_offset=9), body=[Return(value=Call(func=Name(id='asciionly', ctx=Load(), lineno=87, col_offset=15), args=[Call(func=Attribute(value=Name(id='s', ctx=Load(), lineno=87, col_offset=25), attr='encode', ctx=Load(), lineno=87, col_offset=25), args=[Str(s='ascii', lineno=87, col_offset=34), Str(s='ignore', lineno=87, col_offset=43)], keywords=[], lineno=87, col_offset=25)], keywords=[], lineno=87, col_offset=15), lineno=87, col_offset=8)], orelse=[Return(value=Call(func=Name(id='asciidammit', ctx=Load(), lineno=89, col_offset=15), args=[Call(func=Name(id='unicode', ctx=Load(), lineno=89, col_offset=27), args=[Name(id='s', ctx=Load(), lineno=89, col_offset=35)], keywords=[], lineno=89, col_offset=27)], keywords=[], lineno=89, col_offset=15), lineno=89, col_offset=8)], lineno=86, col_offset=9)], lineno=84, col_offset=4)], decorator_list=[], returns=None, lineno=83, col_offset=0), FunctionDef(name='make_type_consistent', args=arguments(args=[arg(arg='s1', annotation=None, lineno=92, col_offset=25), arg(arg='s2', annotation=None, lineno=92, col_offset=29)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s="If both objects aren't either both string or unicode instances force them to unicode", lineno=93, col_offset=4), lineno=93, col_offset=4), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load(), lineno=94, col_offset=7), args=[Name(id='s1', ctx=Load(), lineno=94, col_offset=18), Name(id='str', ctx=Load(), lineno=94, col_offset=22)], keywords=[], lineno=94, col_offset=7), Call(func=Name(id='isinstance', ctx=Load(), lineno=94, col_offset=31), args=[Name(id='s2', ctx=Load(), lineno=94, col_offset=42), Name(id='str', ctx=Load(), lineno=94, col_offset=46)], keywords=[], lineno=94, col_offset=31)], lineno=94, col_offset=7), body=[Return(value=Tuple(elts=[Name(id='s1', ctx=Load(), lineno=95, col_offset=15), Name(id='s2', ctx=Load(), lineno=95, col_offset=19)], ctx=Load(), lineno=95, col_offset=15), lineno=95, col_offset=8)], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load(), lineno=97, col_offset=9), args=[Name(id='s1', ctx=Load(), lineno=97, col_offset=20), Name(id='unicode', ctx=Load(), lineno=97, col_offset=24)], keywords=[], lineno=97, col_offset=9), Call(func=Name(id='isinstance', ctx=Load(), lineno=97, col_offset=37), args=[Name(id='s2', ctx=Load(), lineno=97, col_offset=48), Name(id='unicode', ctx=Load(), lineno=97, col_offset=52)], keywords=[], lineno=97, col_offset=37)], lineno=97, col_offset=9), body=[Return(value=Tuple(elts=[Name(id='s1', ctx=Load(), lineno=98, col_offset=15), Name(id='s2', ctx=Load(), lineno=98, col_offset=19)], ctx=Load(), lineno=98, col_offset=15), lineno=98, col_offset=8)], orelse=[Return(value=Tuple(elts=[Call(func=Name(id='unicode', ctx=Load(), lineno=101, col_offset=15), args=[Name(id='s1', ctx=Load(), lineno=101, col_offset=23)], keywords=[], lineno=101, col_offset=15), Call(func=Name(id='unicode', ctx=Load(), lineno=101, col_offset=28), args=[Name(id='s2', ctx=Load(), lineno=101, col_offset=36)], keywords=[], lineno=101, col_offset=28)], ctx=Load(), lineno=101, col_offset=15), lineno=101, col_offset=8)], lineno=97, col_offset=9)], lineno=94, col_offset=4)], decorator_list=[], returns=None, lineno=92, col_offset=0), FunctionDef(name='full_process', args=arguments(args=[arg(arg='s', annotation=None, lineno=104, col_offset=17), arg(arg='force_ascii', annotation=None, lineno=104, col_offset=20)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=False, lineno=104, col_offset=32)]), body=[Expr(value=Str(s='Process string by\n        -- removing all but letters and numbers\n        -- trim whitespace\n        -- force to lower case\n        if force_ascii == True, force convert to ascii', lineno=109, col_offset=-1), lineno=109, col_offset=-1), If(test=Compare(left=Name(id='s', ctx=Load(), lineno=111, col_offset=7), ops=[Is()], comparators=[NameConstant(value=None, lineno=111, col_offset=12)], lineno=111, col_offset=7), body=[Return(value=Str(s='', lineno=112, col_offset=15), lineno=112, col_offset=8)], orelse=[], lineno=111, col_offset=4), If(test=Name(id='force_ascii', ctx=Load(), lineno=114, col_offset=7), body=[Assign(targets=[Name(id='s', ctx=Store(), lineno=115, col_offset=8)], value=Call(func=Name(id='asciidammit', ctx=Load(), lineno=115, col_offset=12), args=[Name(id='s', ctx=Load(), lineno=115, col_offset=24)], keywords=[], lineno=115, col_offset=12), lineno=115, col_offset=8)], orelse=[], lineno=114, col_offset=4), Assign(targets=[Name(id='string_out', ctx=Store(), lineno=117, col_offset=4)], value=Call(func=Attribute(value=Name(id='StringProcessor', ctx=Load(), lineno=117, col_offset=17), attr='replace_non_letters_non_numbers_with_whitespace', ctx=Load(), lineno=117, col_offset=17), args=[Name(id='s', ctx=Load(), lineno=117, col_offset=81)], keywords=[], lineno=117, col_offset=17), lineno=117, col_offset=4), Assign(targets=[Name(id='string_out', ctx=Store(), lineno=119, col_offset=4)], value=Call(func=Attribute(value=Name(id='StringProcessor', ctx=Load(), lineno=119, col_offset=17), attr='to_lower_case', ctx=Load(), lineno=119, col_offset=17), args=[Name(id='string_out', ctx=Load(), lineno=119, col_offset=47)], keywords=[], lineno=119, col_offset=17), lineno=119, col_offset=4), Assign(targets=[Name(id='string_out', ctx=Store(), lineno=121, col_offset=4)], value=Call(func=Attribute(value=Name(id='StringProcessor', ctx=Load(), lineno=121, col_offset=17), attr='strip', ctx=Load(), lineno=121, col_offset=17), args=[Name(id='string_out', ctx=Load(), lineno=121, col_offset=39)], keywords=[], lineno=121, col_offset=17), lineno=121, col_offset=4), Return(value=Name(id='string_out', ctx=Load(), lineno=122, col_offset=11), lineno=122, col_offset=4)], decorator_list=[], returns=None, lineno=104, col_offset=0), FunctionDef(name='intr', args=arguments(args=[arg(arg='n', annotation=None, lineno=125, col_offset=9)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='Returns a correctly rounded integer', lineno=126, col_offset=4), lineno=126, col_offset=4), Return(value=Call(func=Name(id='int', ctx=Load(), lineno=127, col_offset=11), args=[Call(func=Name(id='round', ctx=Load(), lineno=127, col_offset=15), args=[Name(id='n', ctx=Load(), lineno=127, col_offset=21)], keywords=[], lineno=127, col_offset=15)], keywords=[], lineno=127, col_offset=11), lineno=127, col_offset=4)], decorator_list=[], returns=None, lineno=125, col_offset=0), FunctionDef(name='ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=131, col_offset=10), arg(arg='s2', annotation=None, lineno=131, col_offset=14)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='s1', ctx=Store(), lineno=132, col_offset=4), Name(id='s2', ctx=Store(), lineno=132, col_offset=8)], ctx=Store(), lineno=132, col_offset=4)], value=Call(func=Name(id='make_type_consistent', ctx=Load(), lineno=132, col_offset=13), args=[Name(id='s1', ctx=Load(), lineno=132, col_offset=34), Name(id='s2', ctx=Load(), lineno=132, col_offset=38)], keywords=[], lineno=132, col_offset=13), lineno=132, col_offset=4), Assign(targets=[Name(id='m', ctx=Store(), lineno=134, col_offset=4)], value=Call(func=Name(id='SequenceMatcher', ctx=Load(), lineno=134, col_offset=8), args=[NameConstant(value=None, lineno=134, col_offset=24), Name(id='s1', ctx=Load(), lineno=134, col_offset=30), Name(id='s2', ctx=Load(), lineno=134, col_offset=34)], keywords=[], lineno=134, col_offset=8), lineno=134, col_offset=4), Return(value=Call(func=Name(id='intr', ctx=Load(), lineno=135, col_offset=11), args=[BinOp(left=Num(n=100, lineno=135, col_offset=16), op=Mult(), right=Call(func=Attribute(value=Name(id='m', ctx=Load(), lineno=135, col_offset=22), attr='ratio', ctx=Load(), lineno=135, col_offset=22), args=[], keywords=[], lineno=135, col_offset=22), lineno=135, col_offset=16)], keywords=[], lineno=135, col_offset=11), lineno=135, col_offset=4)], decorator_list=[Name(id='check_for_none', ctx=Load(), lineno=129, col_offset=1), Name(id='check_empty_string', ctx=Load(), lineno=130, col_offset=1)], returns=None, lineno=129, col_offset=0), FunctionDef(name='partial_ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=140, col_offset=18), arg(arg='s2', annotation=None, lineno=140, col_offset=22)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Expr(value=Str(s='"Return the ratio of the most similar substring\n    as a number between 0 and 100.', lineno=142, col_offset=-1), lineno=142, col_offset=-1), Assign(targets=[Tuple(elts=[Name(id='s1', ctx=Store(), lineno=143, col_offset=4), Name(id='s2', ctx=Store(), lineno=143, col_offset=8)], ctx=Store(), lineno=143, col_offset=4)], value=Call(func=Name(id='make_type_consistent', ctx=Load(), lineno=143, col_offset=13), args=[Name(id='s1', ctx=Load(), lineno=143, col_offset=34), Name(id='s2', ctx=Load(), lineno=143, col_offset=38)], keywords=[], lineno=143, col_offset=13), lineno=143, col_offset=4), If(test=Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=145, col_offset=7), args=[Name(id='s1', ctx=Load(), lineno=145, col_offset=11)], keywords=[], lineno=145, col_offset=7), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load(), lineno=145, col_offset=18), args=[Name(id='s2', ctx=Load(), lineno=145, col_offset=22)], keywords=[], lineno=145, col_offset=18)], lineno=145, col_offset=7), body=[Assign(targets=[Name(id='shorter', ctx=Store(), lineno=146, col_offset=8)], value=Name(id='s1', ctx=Load(), lineno=146, col_offset=18), lineno=146, col_offset=8), Assign(targets=[Name(id='longer', ctx=Store(), lineno=147, col_offset=8)], value=Name(id='s2', ctx=Load(), lineno=147, col_offset=17), lineno=147, col_offset=8)], orelse=[Assign(targets=[Name(id='shorter', ctx=Store(), lineno=149, col_offset=8)], value=Name(id='s2', ctx=Load(), lineno=149, col_offset=18), lineno=149, col_offset=8), Assign(targets=[Name(id='longer', ctx=Store(), lineno=150, col_offset=8)], value=Name(id='s1', ctx=Load(), lineno=150, col_offset=17), lineno=150, col_offset=8)], lineno=145, col_offset=4), Assign(targets=[Name(id='m', ctx=Store(), lineno=152, col_offset=4)], value=Call(func=Name(id='SequenceMatcher', ctx=Load(), lineno=152, col_offset=8), args=[NameConstant(value=None, lineno=152, col_offset=24), Name(id='shorter', ctx=Load(), lineno=152, col_offset=30), Name(id='longer', ctx=Load(), lineno=152, col_offset=39)], keywords=[], lineno=152, col_offset=8), lineno=152, col_offset=4), Assign(targets=[Name(id='blocks', ctx=Store(), lineno=153, col_offset=4)], value=Call(func=Attribute(value=Name(id='m', ctx=Load(), lineno=153, col_offset=13), attr='get_matching_blocks', ctx=Load(), lineno=153, col_offset=13), args=[], keywords=[], lineno=153, col_offset=13), lineno=153, col_offset=4), Assign(targets=[Name(id='scores', ctx=Store(), lineno=161, col_offset=4)], value=List(elts=[], ctx=Load(), lineno=161, col_offset=13), lineno=161, col_offset=4), For(target=Name(id='block', ctx=Store(), lineno=162, col_offset=8), iter=Name(id='blocks', ctx=Load(), lineno=162, col_offset=17), body=[Assign(targets=[Name(id='long_start', ctx=Store(), lineno=163, col_offset=8)], value=IfExp(test=Compare(left=BinOp(left=Subscript(value=Name(id='block', ctx=Load(), lineno=163, col_offset=45), slice=Index(value=Num(n=1, lineno=163, col_offset=51)), ctx=Load(), lineno=163, col_offset=45), op=Sub(), right=Subscript(value=Name(id='block', ctx=Load(), lineno=163, col_offset=56), slice=Index(value=Num(n=0, lineno=163, col_offset=62)), ctx=Load(), lineno=163, col_offset=56), lineno=163, col_offset=45), ops=[Gt()], comparators=[Num(n=0, lineno=163, col_offset=68)], lineno=163, col_offset=44), body=BinOp(left=Subscript(value=Name(id='block', ctx=Load(), lineno=163, col_offset=21), slice=Index(value=Num(n=1, lineno=163, col_offset=27)), ctx=Load(), lineno=163, col_offset=21), op=Sub(), right=Subscript(value=Name(id='block', ctx=Load(), lineno=163, col_offset=32), slice=Index(value=Num(n=0, lineno=163, col_offset=38)), ctx=Load(), lineno=163, col_offset=32), lineno=163, col_offset=21), orelse=Num(n=0, lineno=163, col_offset=75), lineno=163, col_offset=21), lineno=163, col_offset=8), Assign(targets=[Name(id='long_end', ctx=Store(), lineno=164, col_offset=8)], value=BinOp(left=Name(id='long_start', ctx=Load(), lineno=164, col_offset=19), op=Add(), right=Call(func=Name(id='len', ctx=Load(), lineno=164, col_offset=32), args=[Name(id='shorter', ctx=Load(), lineno=164, col_offset=36)], keywords=[], lineno=164, col_offset=32), lineno=164, col_offset=19), lineno=164, col_offset=8), Assign(targets=[Name(id='long_substr', ctx=Store(), lineno=165, col_offset=8)], value=Subscript(value=Name(id='longer', ctx=Load(), lineno=165, col_offset=22), slice=Slice(lower=Name(id='long_start', ctx=Load(), lineno=165, col_offset=29), upper=Name(id='long_end', ctx=Load(), lineno=165, col_offset=40), step=None), ctx=Load(), lineno=165, col_offset=22), lineno=165, col_offset=8), Assign(targets=[Name(id='m2', ctx=Store(), lineno=167, col_offset=8)], value=Call(func=Name(id='SequenceMatcher', ctx=Load(), lineno=167, col_offset=13), args=[NameConstant(value=None, lineno=167, col_offset=29), Name(id='shorter', ctx=Load(), lineno=167, col_offset=35), Name(id='long_substr', ctx=Load(), lineno=167, col_offset=44)], keywords=[], lineno=167, col_offset=13), lineno=167, col_offset=8), Assign(targets=[Name(id='r', ctx=Store(), lineno=168, col_offset=8)], value=Call(func=Attribute(value=Name(id='m2', ctx=Load(), lineno=168, col_offset=12), attr='ratio', ctx=Load(), lineno=168, col_offset=12), args=[], keywords=[], lineno=168, col_offset=12), lineno=168, col_offset=8), If(test=Compare(left=Name(id='r', ctx=Load(), lineno=169, col_offset=11), ops=[Gt()], comparators=[Num(n=0.995, lineno=169, col_offset=15)], lineno=169, col_offset=11), body=[Return(value=Num(n=100, lineno=170, col_offset=19), lineno=170, col_offset=12)], orelse=[Expr(value=Call(func=Attribute(value=Name(id='scores', ctx=Load(), lineno=172, col_offset=12), attr='append', ctx=Load(), lineno=172, col_offset=12), args=[Name(id='r', ctx=Load(), lineno=172, col_offset=26)], keywords=[], lineno=172, col_offset=12), lineno=172, col_offset=12)], lineno=169, col_offset=8)], orelse=[], lineno=162, col_offset=4), Return(value=Call(func=Name(id='intr', ctx=Load(), lineno=174, col_offset=11), args=[BinOp(left=Num(n=100, lineno=174, col_offset=16), op=Mult(), right=Call(func=Name(id='max', ctx=Load(), lineno=174, col_offset=22), args=[Name(id='scores', ctx=Load(), lineno=174, col_offset=26)], keywords=[], lineno=174, col_offset=22), lineno=174, col_offset=16)], keywords=[], lineno=174, col_offset=11), lineno=174, col_offset=4)], decorator_list=[Name(id='check_for_none', ctx=Load(), lineno=138, col_offset=1), Name(id='check_empty_string', ctx=Load(), lineno=139, col_offset=1)], returns=None, lineno=138, col_offset=0), FunctionDef(name='_process_and_sort', args=arguments(args=[arg(arg='s', annotation=None, lineno=181, col_offset=22), arg(arg='force_ascii', annotation=None, lineno=181, col_offset=25), arg(arg='do_full_process', annotation=None, lineno=181, col_offset=38)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=181, col_offset=54)]), body=[Expr(value=Str(s='Return a cleaned string with token sorted.', lineno=182, col_offset=4), lineno=182, col_offset=4), Assign(targets=[Name(id='ts', ctx=Store(), lineno=184, col_offset=4)], value=IfExp(test=Name(id='do_full_process', ctx=Load(), lineno=184, col_offset=53), body=Call(func=Name(id='full_process', ctx=Load(), lineno=184, col_offset=9), args=[Name(id='s', ctx=Load(), lineno=184, col_offset=22)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=184, col_offset=37))], lineno=184, col_offset=9), orelse=Name(id='s', ctx=Load(), lineno=184, col_offset=74), lineno=184, col_offset=9), lineno=184, col_offset=4), Assign(targets=[Name(id='tokens', ctx=Store(), lineno=185, col_offset=4)], value=Call(func=Attribute(value=Name(id='ts', ctx=Load(), lineno=185, col_offset=13), attr='split', ctx=Load(), lineno=185, col_offset=13), args=[], keywords=[], lineno=185, col_offset=13), lineno=185, col_offset=4), Assign(targets=[Name(id='sorted_string', ctx=Store(), lineno=188, col_offset=4)], value=Call(func=Attribute(value=Str(s=' ', lineno=188, col_offset=20), attr='join', ctx=Load(), lineno=188, col_offset=20), args=[Call(func=Name(id='sorted', ctx=Load(), lineno=188, col_offset=30), args=[Name(id='tokens', ctx=Load(), lineno=188, col_offset=37)], keywords=[], lineno=188, col_offset=30)], keywords=[], lineno=188, col_offset=20), lineno=188, col_offset=4), Return(value=Call(func=Attribute(value=Name(id='sorted_string', ctx=Load(), lineno=189, col_offset=11), attr='strip', ctx=Load(), lineno=189, col_offset=11), args=[], keywords=[], lineno=189, col_offset=11), lineno=189, col_offset=4)], decorator_list=[], returns=None, lineno=181, col_offset=0), FunctionDef(name='_token_sort', args=arguments(args=[arg(arg='s1', annotation=None, lineno=197, col_offset=16), arg(arg='s2', annotation=None, lineno=197, col_offset=20), arg(arg='partial', annotation=None, lineno=197, col_offset=24), arg(arg='force_ascii', annotation=None, lineno=197, col_offset=38), arg(arg='do_full_process', annotation=None, lineno=197, col_offset=56)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=197, col_offset=32), NameConstant(value=True, lineno=197, col_offset=50), NameConstant(value=True, lineno=197, col_offset=72)]), body=[Assign(targets=[Name(id='sorted1', ctx=Store(), lineno=198, col_offset=4)], value=Call(func=Name(id='_process_and_sort', ctx=Load(), lineno=198, col_offset=14), args=[Name(id='s1', ctx=Load(), lineno=198, col_offset=32), Name(id='force_ascii', ctx=Load(), lineno=198, col_offset=36)], keywords=[keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=198, col_offset=65))], lineno=198, col_offset=14), lineno=198, col_offset=4), Assign(targets=[Name(id='sorted2', ctx=Store(), lineno=199, col_offset=4)], value=Call(func=Name(id='_process_and_sort', ctx=Load(), lineno=199, col_offset=14), args=[Name(id='s2', ctx=Load(), lineno=199, col_offset=32), Name(id='force_ascii', ctx=Load(), lineno=199, col_offset=36)], keywords=[keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=199, col_offset=65))], lineno=199, col_offset=14), lineno=199, col_offset=4), If(test=Name(id='partial', ctx=Load(), lineno=201, col_offset=7), body=[Return(value=Call(func=Name(id='partial_ratio', ctx=Load(), lineno=202, col_offset=15), args=[Name(id='sorted1', ctx=Load(), lineno=202, col_offset=29), Name(id='sorted2', ctx=Load(), lineno=202, col_offset=38)], keywords=[], lineno=202, col_offset=15), lineno=202, col_offset=8)], orelse=[Return(value=Call(func=Name(id='ratio', ctx=Load(), lineno=204, col_offset=15), args=[Name(id='sorted1', ctx=Load(), lineno=204, col_offset=21), Name(id='sorted2', ctx=Load(), lineno=204, col_offset=30)], keywords=[], lineno=204, col_offset=15), lineno=204, col_offset=8)], lineno=201, col_offset=4)], decorator_list=[Name(id='check_for_none', ctx=Load(), lineno=196, col_offset=1)], returns=None, lineno=196, col_offset=0), FunctionDef(name='token_sort_ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=207, col_offset=21), arg(arg='s2', annotation=None, lineno=207, col_offset=25), arg(arg='force_ascii', annotation=None, lineno=207, col_offset=29), arg(arg='do_full_process', annotation=None, lineno=207, col_offset=47)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=207, col_offset=41), NameConstant(value=True, lineno=207, col_offset=63)]), body=[Expr(value=Str(s="Return a measure of the sequences' similarity between 0 and 100\n    but sorting the token before comparing.\n    ", lineno=210, col_offset=-1), lineno=210, col_offset=-1), Return(value=Call(func=Name(id='_token_sort', ctx=Load(), lineno=211, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=211, col_offset=23), Name(id='s2', ctx=Load(), lineno=211, col_offset=27)], keywords=[keyword(arg='partial', value=NameConstant(value=False, lineno=211, col_offset=39)), keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=211, col_offset=58)), keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=211, col_offset=87))], lineno=211, col_offset=11), lineno=211, col_offset=4)], decorator_list=[], returns=None, lineno=207, col_offset=0), FunctionDef(name='partial_token_sort_ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=214, col_offset=29), arg(arg='s2', annotation=None, lineno=214, col_offset=33), arg(arg='force_ascii', annotation=None, lineno=214, col_offset=37), arg(arg='do_full_process', annotation=None, lineno=214, col_offset=55)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=214, col_offset=49), NameConstant(value=True, lineno=214, col_offset=71)]), body=[Expr(value=Str(s='Return the ratio of the most similar substring as a number between\n    0 and 100 but sorting the token before comparing.\n    ', lineno=217, col_offset=-1), lineno=217, col_offset=-1), Return(value=Call(func=Name(id='_token_sort', ctx=Load(), lineno=218, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=218, col_offset=23), Name(id='s2', ctx=Load(), lineno=218, col_offset=27)], keywords=[keyword(arg='partial', value=NameConstant(value=True, lineno=218, col_offset=39)), keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=218, col_offset=57)), keyword(arg='do_full_process', value=Name(id='full_process', ctx=Load(), lineno=218, col_offset=86))], lineno=218, col_offset=11), lineno=218, col_offset=4)], decorator_list=[], returns=None, lineno=214, col_offset=0), FunctionDef(name='_token_set', args=arguments(args=[arg(arg='s1', annotation=None, lineno=222, col_offset=15), arg(arg='s2', annotation=None, lineno=222, col_offset=19), arg(arg='partial', annotation=None, lineno=222, col_offset=23), arg(arg='force_ascii', annotation=None, lineno=222, col_offset=37), arg(arg='do_full_process', annotation=None, lineno=222, col_offset=55)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=222, col_offset=31), NameConstant(value=True, lineno=222, col_offset=49), NameConstant(value=True, lineno=222, col_offset=71)]), body=[Expr(value=Str(s='Find all alphanumeric tokens in each string...\n        - treat them as a set\n        - construct two strings of the form:\n            <sorted_intersection><sorted_remainder>\n        - take ratios of those two strings\n        - controls for unordered partial matches', lineno=228, col_offset=-1), lineno=228, col_offset=-1), Assign(targets=[Name(id='p1', ctx=Store(), lineno=230, col_offset=4)], value=IfExp(test=Name(id='do_full_process', ctx=Load(), lineno=230, col_offset=54), body=Call(func=Name(id='full_process', ctx=Load(), lineno=230, col_offset=9), args=[Name(id='s1', ctx=Load(), lineno=230, col_offset=22)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=230, col_offset=38))], lineno=230, col_offset=9), orelse=Name(id='s1', ctx=Load(), lineno=230, col_offset=75), lineno=230, col_offset=9), lineno=230, col_offset=4), Assign(targets=[Name(id='p2', ctx=Store(), lineno=231, col_offset=4)], value=IfExp(test=Name(id='do_full_process', ctx=Load(), lineno=231, col_offset=54), body=Call(func=Name(id='full_process', ctx=Load(), lineno=231, col_offset=9), args=[Name(id='s2', ctx=Load(), lineno=231, col_offset=22)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=231, col_offset=38))], lineno=231, col_offset=9), orelse=Name(id='s2', ctx=Load(), lineno=231, col_offset=75), lineno=231, col_offset=9), lineno=231, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=233, col_offset=11), args=[Name(id='p1', ctx=Load(), lineno=233, col_offset=27)], keywords=[], lineno=233, col_offset=11), lineno=233, col_offset=7), body=[Return(value=Num(n=0, lineno=234, col_offset=15), lineno=234, col_offset=8)], orelse=[], lineno=233, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=235, col_offset=11), args=[Name(id='p2', ctx=Load(), lineno=235, col_offset=27)], keywords=[], lineno=235, col_offset=11), lineno=235, col_offset=7), body=[Return(value=Num(n=0, lineno=236, col_offset=15), lineno=236, col_offset=8)], orelse=[], lineno=235, col_offset=4), Assign(targets=[Name(id='tokens1', ctx=Store(), lineno=239, col_offset=4)], value=Call(func=Name(id='set', ctx=Load(), lineno=239, col_offset=14), args=[Call(func=Attribute(value=Name(id='p1', ctx=Load(), lineno=239, col_offset=18), attr='split', ctx=Load(), lineno=239, col_offset=18), args=[], keywords=[], lineno=239, col_offset=18)], keywords=[], lineno=239, col_offset=14), lineno=239, col_offset=4), Assign(targets=[Name(id='tokens2', ctx=Store(), lineno=240, col_offset=4)], value=Call(func=Name(id='set', ctx=Load(), lineno=240, col_offset=14), args=[Call(func=Attribute(value=Name(id='p2', ctx=Load(), lineno=240, col_offset=18), attr='split', ctx=Load(), lineno=240, col_offset=18), args=[], keywords=[], lineno=240, col_offset=18)], keywords=[], lineno=240, col_offset=14), lineno=240, col_offset=4), Assign(targets=[Name(id='intersection', ctx=Store(), lineno=242, col_offset=4)], value=Call(func=Attribute(value=Name(id='tokens1', ctx=Load(), lineno=242, col_offset=19), attr='intersection', ctx=Load(), lineno=242, col_offset=19), args=[Name(id='tokens2', ctx=Load(), lineno=242, col_offset=40)], keywords=[], lineno=242, col_offset=19), lineno=242, col_offset=4), Assign(targets=[Name(id='diff1to2', ctx=Store(), lineno=243, col_offset=4)], value=Call(func=Attribute(value=Name(id='tokens1', ctx=Load(), lineno=243, col_offset=15), attr='difference', ctx=Load(), lineno=243, col_offset=15), args=[Name(id='tokens2', ctx=Load(), lineno=243, col_offset=34)], keywords=[], lineno=243, col_offset=15), lineno=243, col_offset=4), Assign(targets=[Name(id='diff2to1', ctx=Store(), lineno=244, col_offset=4)], value=Call(func=Attribute(value=Name(id='tokens2', ctx=Load(), lineno=244, col_offset=15), attr='difference', ctx=Load(), lineno=244, col_offset=15), args=[Name(id='tokens1', ctx=Load(), lineno=244, col_offset=34)], keywords=[], lineno=244, col_offset=15), lineno=244, col_offset=4), Assign(targets=[Name(id='sorted_sect', ctx=Store(), lineno=246, col_offset=4)], value=Call(func=Attribute(value=Str(s=' ', lineno=246, col_offset=18), attr='join', ctx=Load(), lineno=246, col_offset=18), args=[Call(func=Name(id='sorted', ctx=Load(), lineno=246, col_offset=27), args=[Name(id='intersection', ctx=Load(), lineno=246, col_offset=34)], keywords=[], lineno=246, col_offset=27)], keywords=[], lineno=246, col_offset=18), lineno=246, col_offset=4), Assign(targets=[Name(id='sorted_1to2', ctx=Store(), lineno=247, col_offset=4)], value=Call(func=Attribute(value=Str(s=' ', lineno=247, col_offset=18), attr='join', ctx=Load(), lineno=247, col_offset=18), args=[Call(func=Name(id='sorted', ctx=Load(), lineno=247, col_offset=27), args=[Name(id='diff1to2', ctx=Load(), lineno=247, col_offset=34)], keywords=[], lineno=247, col_offset=27)], keywords=[], lineno=247, col_offset=18), lineno=247, col_offset=4), Assign(targets=[Name(id='sorted_2to1', ctx=Store(), lineno=248, col_offset=4)], value=Call(func=Attribute(value=Str(s=' ', lineno=248, col_offset=18), attr='join', ctx=Load(), lineno=248, col_offset=18), args=[Call(func=Name(id='sorted', ctx=Load(), lineno=248, col_offset=27), args=[Name(id='diff2to1', ctx=Load(), lineno=248, col_offset=34)], keywords=[], lineno=248, col_offset=27)], keywords=[], lineno=248, col_offset=18), lineno=248, col_offset=4), Assign(targets=[Name(id='combined_1to2', ctx=Store(), lineno=250, col_offset=4)], value=BinOp(left=BinOp(left=Name(id='sorted_sect', ctx=Load(), lineno=250, col_offset=20), op=Add(), right=Str(s=' ', lineno=250, col_offset=34), lineno=250, col_offset=20), op=Add(), right=Name(id='sorted_1to2', ctx=Load(), lineno=250, col_offset=40), lineno=250, col_offset=38), lineno=250, col_offset=4), Assign(targets=[Name(id='combined_2to1', ctx=Store(), lineno=251, col_offset=4)], value=BinOp(left=BinOp(left=Name(id='sorted_sect', ctx=Load(), lineno=251, col_offset=20), op=Add(), right=Str(s=' ', lineno=251, col_offset=34), lineno=251, col_offset=20), op=Add(), right=Name(id='sorted_2to1', ctx=Load(), lineno=251, col_offset=40), lineno=251, col_offset=38), lineno=251, col_offset=4), Assign(targets=[Name(id='sorted_sect', ctx=Store(), lineno=254, col_offset=4)], value=Call(func=Attribute(value=Name(id='sorted_sect', ctx=Load(), lineno=254, col_offset=18), attr='strip', ctx=Load(), lineno=254, col_offset=18), args=[], keywords=[], lineno=254, col_offset=18), lineno=254, col_offset=4), Assign(targets=[Name(id='combined_1to2', ctx=Store(), lineno=255, col_offset=4)], value=Call(func=Attribute(value=Name(id='combined_1to2', ctx=Load(), lineno=255, col_offset=20), attr='strip', ctx=Load(), lineno=255, col_offset=20), args=[], keywords=[], lineno=255, col_offset=20), lineno=255, col_offset=4), Assign(targets=[Name(id='combined_2to1', ctx=Store(), lineno=256, col_offset=4)], value=Call(func=Attribute(value=Name(id='combined_2to1', ctx=Load(), lineno=256, col_offset=20), attr='strip', ctx=Load(), lineno=256, col_offset=20), args=[], keywords=[], lineno=256, col_offset=20), lineno=256, col_offset=4), If(test=Name(id='partial', ctx=Load(), lineno=258, col_offset=7), body=[Assign(targets=[Name(id='ratio_func', ctx=Store(), lineno=259, col_offset=8)], value=Name(id='partial_ratio', ctx=Load(), lineno=259, col_offset=21), lineno=259, col_offset=8)], orelse=[Assign(targets=[Name(id='ratio_func', ctx=Store(), lineno=261, col_offset=8)], value=Name(id='ratio', ctx=Load(), lineno=261, col_offset=21), lineno=261, col_offset=8)], lineno=258, col_offset=4), Assign(targets=[Name(id='pairwise', ctx=Store(), lineno=263, col_offset=4)], value=List(elts=[Call(func=Name(id='ratio_func', ctx=Load(), lineno=264, col_offset=8), args=[Name(id='sorted_sect', ctx=Load(), lineno=264, col_offset=19), Name(id='combined_1to2', ctx=Load(), lineno=264, col_offset=32)], keywords=[], lineno=264, col_offset=8), Call(func=Name(id='ratio_func', ctx=Load(), lineno=265, col_offset=8), args=[Name(id='sorted_sect', ctx=Load(), lineno=265, col_offset=19), Name(id='combined_2to1', ctx=Load(), lineno=265, col_offset=32)], keywords=[], lineno=265, col_offset=8), Call(func=Name(id='ratio_func', ctx=Load(), lineno=266, col_offset=8), args=[Name(id='combined_1to2', ctx=Load(), lineno=266, col_offset=19), Name(id='combined_2to1', ctx=Load(), lineno=266, col_offset=34)], keywords=[], lineno=266, col_offset=8)], ctx=Load(), lineno=263, col_offset=15), lineno=263, col_offset=4), Return(value=Call(func=Name(id='max', ctx=Load(), lineno=268, col_offset=11), args=[Name(id='pairwise', ctx=Load(), lineno=268, col_offset=15)], keywords=[], lineno=268, col_offset=11), lineno=268, col_offset=4)], decorator_list=[Name(id='check_for_none', ctx=Load(), lineno=221, col_offset=1)], returns=None, lineno=221, col_offset=0), FunctionDef(name='token_set_ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=271, col_offset=20), arg(arg='s2', annotation=None, lineno=271, col_offset=24), arg(arg='force_ascii', annotation=None, lineno=271, col_offset=28), arg(arg='do_full_process', annotation=None, lineno=271, col_offset=46)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=271, col_offset=40), NameConstant(value=True, lineno=271, col_offset=62)]), body=[Return(value=Call(func=Name(id='_token_set', ctx=Load(), lineno=272, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=272, col_offset=22), Name(id='s2', ctx=Load(), lineno=272, col_offset=26)], keywords=[keyword(arg='partial', value=NameConstant(value=False, lineno=272, col_offset=38)), keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=272, col_offset=57)), keyword(arg='do_full_process', value=Name(id='full_process', ctx=Load(), lineno=272, col_offset=86))], lineno=272, col_offset=11), lineno=272, col_offset=4)], decorator_list=[], returns=None, lineno=271, col_offset=0), FunctionDef(name='partial_token_set_ratio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=275, col_offset=28), arg(arg='s2', annotation=None, lineno=275, col_offset=32), arg(arg='force_ascii', annotation=None, lineno=275, col_offset=36), arg(arg='do_full_process', annotation=None, lineno=275, col_offset=54)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=275, col_offset=48), NameConstant(value=True, lineno=275, col_offset=70)]), body=[Return(value=Call(func=Name(id='_token_set', ctx=Load(), lineno=276, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=276, col_offset=22), Name(id='s2', ctx=Load(), lineno=276, col_offset=26)], keywords=[keyword(arg='partial', value=NameConstant(value=True, lineno=276, col_offset=38)), keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=276, col_offset=56)), keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=276, col_offset=85))], lineno=276, col_offset=11), lineno=276, col_offset=4)], decorator_list=[], returns=None, lineno=275, col_offset=0), FunctionDef(name='QRatio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=284, col_offset=11), arg(arg='s2', annotation=None, lineno=284, col_offset=15), arg(arg='force_ascii', annotation=None, lineno=284, col_offset=19), arg(arg='do_full_process', annotation=None, lineno=284, col_offset=37)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=284, col_offset=31), NameConstant(value=True, lineno=284, col_offset=53)]), body=[Expr(value=Str(s='\n    Quick ratio comparison between two strings.\n\n    Runs full_process from on both strings\n    Short circuits if either of the strings is empty after processing.\n\n    :param s1:\n    :param s2:\n    :param force_ascii: Allow only ASCII characters (Default: True)\n    :full_process: Process inputs, used here to avoid double processing in extract functions (Default: True)\n    :return: similarity ratio\n    ', lineno=296, col_offset=-1), lineno=296, col_offset=-1), If(test=Name(id='do_full_process', ctx=Load(), lineno=298, col_offset=7), body=[Assign(targets=[Name(id='p1', ctx=Store(), lineno=299, col_offset=8)], value=Call(func=Name(id='full_process', ctx=Load(), lineno=299, col_offset=13), args=[Name(id='s1', ctx=Load(), lineno=299, col_offset=26)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=299, col_offset=42))], lineno=299, col_offset=13), lineno=299, col_offset=8), Assign(targets=[Name(id='p2', ctx=Store(), lineno=300, col_offset=8)], value=Call(func=Name(id='full_process', ctx=Load(), lineno=300, col_offset=13), args=[Name(id='s2', ctx=Load(), lineno=300, col_offset=26)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=300, col_offset=42))], lineno=300, col_offset=13), lineno=300, col_offset=8)], orelse=[Assign(targets=[Name(id='p1', ctx=Store(), lineno=302, col_offset=8)], value=Name(id='s1', ctx=Load(), lineno=302, col_offset=13), lineno=302, col_offset=8), Assign(targets=[Name(id='p2', ctx=Store(), lineno=303, col_offset=8)], value=Name(id='s2', ctx=Load(), lineno=303, col_offset=13), lineno=303, col_offset=8)], lineno=298, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=305, col_offset=11), args=[Name(id='p1', ctx=Load(), lineno=305, col_offset=27)], keywords=[], lineno=305, col_offset=11), lineno=305, col_offset=7), body=[Return(value=Num(n=0, lineno=306, col_offset=15), lineno=306, col_offset=8)], orelse=[], lineno=305, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=307, col_offset=11), args=[Name(id='p2', ctx=Load(), lineno=307, col_offset=27)], keywords=[], lineno=307, col_offset=11), lineno=307, col_offset=7), body=[Return(value=Num(n=0, lineno=308, col_offset=15), lineno=308, col_offset=8)], orelse=[], lineno=307, col_offset=4), Return(value=Call(func=Name(id='ratio', ctx=Load(), lineno=310, col_offset=11), args=[Name(id='p1', ctx=Load(), lineno=310, col_offset=17), Name(id='p2', ctx=Load(), lineno=310, col_offset=21)], keywords=[], lineno=310, col_offset=11), lineno=310, col_offset=4)], decorator_list=[], returns=None, lineno=284, col_offset=0), FunctionDef(name='UQRatio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=313, col_offset=12), arg(arg='s2', annotation=None, lineno=313, col_offset=16), arg(arg='do_full_process', annotation=None, lineno=313, col_offset=20)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=313, col_offset=36)]), body=[Expr(value=Str(s='\n    Unicode quick ratio\n\n    Calls QRatio with force_ascii set to False\n\n    :param s1:\n    :param s2:\n    :return: similarity ratio\n    ', lineno=322, col_offset=-1), lineno=322, col_offset=-1), Return(value=Call(func=Name(id='QRatio', ctx=Load(), lineno=323, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=323, col_offset=18), Name(id='s2', ctx=Load(), lineno=323, col_offset=22)], keywords=[keyword(arg='force_ascii', value=NameConstant(value=False, lineno=323, col_offset=38)), keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=323, col_offset=61))], lineno=323, col_offset=11), lineno=323, col_offset=4)], decorator_list=[], returns=None, lineno=313, col_offset=0), FunctionDef(name='WRatio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=327, col_offset=11), arg(arg='s2', annotation=None, lineno=327, col_offset=15), arg(arg='force_ascii', annotation=None, lineno=327, col_offset=19), arg(arg='do_full_process', annotation=None, lineno=327, col_offset=37)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=327, col_offset=31), NameConstant(value=True, lineno=327, col_offset=53)]), body=[Expr(value=Str(s="\n    Return a measure of the sequences' similarity between 0 and 100, using different algorithms.\n\n    **Steps in the order they occur**\n\n    #. Run full_process from on both strings\n    #. Short circuit if this makes either string empty\n    #. Take the ratio of the two processed strings (ratio)\n    #. Run checks to compare the length of the strings\n        * If one of the strings is more than 1.5 times as long as the other\n          use partial_ratio comparisons - scale partial results by 0.9\n          (this makes sure only full results can return 100)\n        * If one of the strings is over 8 times as long as the other\n          instead scale by 0.6\n\n    #. Run the other ratio functions\n        * if using partial ratio functions call partial_ratio,\n          partial_token_sort_ratio and partial_token_set_ratio\n          scale all of these by the ratio based on length\n        * otherwise call token_sort_ratio and token_set_ratio\n        * all token based comparisons are scaled by 0.95\n          (on top of any partial scalars)\n\n    #. Take the highest value from these results\n       round it and return it as an integer.\n\n    :param s1:\n    :param s2:\n    :param force_ascii: Allow only ascii characters\n    :type force_ascii: bool\n    :full_process: Process inputs, used here to avoid double processing in extract functions (Default: True)\n    :return:\n    ", lineno=360, col_offset=-1), lineno=360, col_offset=-1), If(test=Name(id='do_full_process', ctx=Load(), lineno=362, col_offset=7), body=[Assign(targets=[Name(id='p1', ctx=Store(), lineno=363, col_offset=8)], value=Call(func=Name(id='full_process', ctx=Load(), lineno=363, col_offset=13), args=[Name(id='s1', ctx=Load(), lineno=363, col_offset=26)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=363, col_offset=42))], lineno=363, col_offset=13), lineno=363, col_offset=8), Assign(targets=[Name(id='p2', ctx=Store(), lineno=364, col_offset=8)], value=Call(func=Name(id='full_process', ctx=Load(), lineno=364, col_offset=13), args=[Name(id='s2', ctx=Load(), lineno=364, col_offset=26)], keywords=[keyword(arg='force_ascii', value=Name(id='force_ascii', ctx=Load(), lineno=364, col_offset=42))], lineno=364, col_offset=13), lineno=364, col_offset=8)], orelse=[Assign(targets=[Name(id='p1', ctx=Store(), lineno=366, col_offset=8)], value=Name(id='s1', ctx=Load(), lineno=366, col_offset=13), lineno=366, col_offset=8), Assign(targets=[Name(id='p2', ctx=Store(), lineno=367, col_offset=8)], value=Name(id='s2', ctx=Load(), lineno=367, col_offset=13), lineno=367, col_offset=8)], lineno=362, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=369, col_offset=11), args=[Name(id='p1', ctx=Load(), lineno=369, col_offset=27)], keywords=[], lineno=369, col_offset=11), lineno=369, col_offset=7), body=[Return(value=Num(n=0, lineno=370, col_offset=15), lineno=370, col_offset=8)], orelse=[], lineno=369, col_offset=4), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='validate_string', ctx=Load(), lineno=371, col_offset=11), args=[Name(id='p2', ctx=Load(), lineno=371, col_offset=27)], keywords=[], lineno=371, col_offset=11), lineno=371, col_offset=7), body=[Return(value=Num(n=0, lineno=372, col_offset=15), lineno=372, col_offset=8)], orelse=[], lineno=371, col_offset=4), Assign(targets=[Name(id='try_partial', ctx=Store(), lineno=375, col_offset=4)], value=NameConstant(value=True, lineno=375, col_offset=18), lineno=375, col_offset=4), Assign(targets=[Name(id='unbase_scale', ctx=Store(), lineno=376, col_offset=4)], value=Num(n=0.95, lineno=376, col_offset=19), lineno=376, col_offset=4), Assign(targets=[Name(id='partial_scale', ctx=Store(), lineno=377, col_offset=4)], value=Num(n=0.9, lineno=377, col_offset=20), lineno=377, col_offset=4), Assign(targets=[Name(id='base', ctx=Store(), lineno=379, col_offset=4)], value=Call(func=Name(id='ratio', ctx=Load(), lineno=379, col_offset=11), args=[Name(id='p1', ctx=Load(), lineno=379, col_offset=17), Name(id='p2', ctx=Load(), lineno=379, col_offset=21)], keywords=[], lineno=379, col_offset=11), lineno=379, col_offset=4), Assign(targets=[Name(id='len_ratio', ctx=Store(), lineno=380, col_offset=4)], value=BinOp(left=Call(func=Name(id='float', ctx=Load(), lineno=380, col_offset=16), args=[Call(func=Name(id='max', ctx=Load(), lineno=380, col_offset=22), args=[Call(func=Name(id='len', ctx=Load(), lineno=380, col_offset=26), args=[Name(id='p1', ctx=Load(), lineno=380, col_offset=30)], keywords=[], lineno=380, col_offset=26), Call(func=Name(id='len', ctx=Load(), lineno=380, col_offset=35), args=[Name(id='p2', ctx=Load(), lineno=380, col_offset=39)], keywords=[], lineno=380, col_offset=35)], keywords=[], lineno=380, col_offset=22)], keywords=[], lineno=380, col_offset=16), op=Div(), right=Call(func=Name(id='min', ctx=Load(), lineno=380, col_offset=47), args=[Call(func=Name(id='len', ctx=Load(), lineno=380, col_offset=51), args=[Name(id='p1', ctx=Load(), lineno=380, col_offset=55)], keywords=[], lineno=380, col_offset=51), Call(func=Name(id='len', ctx=Load(), lineno=380, col_offset=60), args=[Name(id='p2', ctx=Load(), lineno=380, col_offset=64)], keywords=[], lineno=380, col_offset=60)], keywords=[], lineno=380, col_offset=47), lineno=380, col_offset=16), lineno=380, col_offset=4), If(test=Compare(left=Name(id='len_ratio', ctx=Load(), lineno=383, col_offset=7), ops=[Lt()], comparators=[Num(n=1.5, lineno=383, col_offset=19)], lineno=383, col_offset=7), body=[Assign(targets=[Name(id='try_partial', ctx=Store(), lineno=384, col_offset=8)], value=NameConstant(value=False, lineno=384, col_offset=22), lineno=384, col_offset=8)], orelse=[], lineno=383, col_offset=4), If(test=Compare(left=Name(id='len_ratio', ctx=Load(), lineno=387, col_offset=7), ops=[Gt()], comparators=[Num(n=8, lineno=387, col_offset=19)], lineno=387, col_offset=7), body=[Assign(targets=[Name(id='partial_scale', ctx=Store(), lineno=388, col_offset=8)], value=Num(n=0.6, lineno=388, col_offset=24), lineno=388, col_offset=8)], orelse=[], lineno=387, col_offset=4), If(test=Name(id='try_partial', ctx=Load(), lineno=390, col_offset=7), body=[Assign(targets=[Name(id='partial', ctx=Store(), lineno=391, col_offset=8)], value=BinOp(left=Call(func=Name(id='partial_ratio', ctx=Load(), lineno=391, col_offset=18), args=[Name(id='p1', ctx=Load(), lineno=391, col_offset=32), Name(id='p2', ctx=Load(), lineno=391, col_offset=36)], keywords=[], lineno=391, col_offset=18), op=Mult(), right=Name(id='partial_scale', ctx=Load(), lineno=391, col_offset=42), lineno=391, col_offset=18), lineno=391, col_offset=8), Assign(targets=[Name(id='ptsor', ctx=Store(), lineno=392, col_offset=8)], value=BinOp(left=BinOp(left=Call(func=Name(id='partial_token_sort_ratio', ctx=Load(), lineno=392, col_offset=16), args=[Name(id='p1', ctx=Load(), lineno=392, col_offset=41), Name(id='p2', ctx=Load(), lineno=392, col_offset=45)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=392, col_offset=65))], lineno=392, col_offset=16), op=Mult(), right=Name(id='unbase_scale', ctx=Load(), lineno=393, col_offset=14), lineno=392, col_offset=16), op=Mult(), right=Name(id='partial_scale', ctx=Load(), lineno=393, col_offset=29), lineno=393, col_offset=27), lineno=392, col_offset=8), Assign(targets=[Name(id='ptser', ctx=Store(), lineno=394, col_offset=8)], value=BinOp(left=BinOp(left=Call(func=Name(id='partial_token_set_ratio', ctx=Load(), lineno=394, col_offset=16), args=[Name(id='p1', ctx=Load(), lineno=394, col_offset=40), Name(id='p2', ctx=Load(), lineno=394, col_offset=44)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=394, col_offset=64))], lineno=394, col_offset=16), op=Mult(), right=Name(id='unbase_scale', ctx=Load(), lineno=395, col_offset=14), lineno=394, col_offset=16), op=Mult(), right=Name(id='partial_scale', ctx=Load(), lineno=395, col_offset=29), lineno=395, col_offset=27), lineno=394, col_offset=8), Return(value=Call(func=Name(id='intr', ctx=Load(), lineno=397, col_offset=15), args=[Call(func=Name(id='max', ctx=Load(), lineno=397, col_offset=20), args=[Name(id='base', ctx=Load(), lineno=397, col_offset=24), Name(id='partial', ctx=Load(), lineno=397, col_offset=30), Name(id='ptsor', ctx=Load(), lineno=397, col_offset=39), Name(id='ptser', ctx=Load(), lineno=397, col_offset=46)], keywords=[], lineno=397, col_offset=20)], keywords=[], lineno=397, col_offset=15), lineno=397, col_offset=8)], orelse=[Assign(targets=[Name(id='tsor', ctx=Store(), lineno=399, col_offset=8)], value=BinOp(left=Call(func=Name(id='token_sort_ratio', ctx=Load(), lineno=399, col_offset=15), args=[Name(id='p1', ctx=Load(), lineno=399, col_offset=32), Name(id='p2', ctx=Load(), lineno=399, col_offset=36)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=399, col_offset=56))], lineno=399, col_offset=15), op=Mult(), right=Name(id='unbase_scale', ctx=Load(), lineno=399, col_offset=65), lineno=399, col_offset=15), lineno=399, col_offset=8), Assign(targets=[Name(id='tser', ctx=Store(), lineno=400, col_offset=8)], value=BinOp(left=Call(func=Name(id='token_set_ratio', ctx=Load(), lineno=400, col_offset=15), args=[Name(id='p1', ctx=Load(), lineno=400, col_offset=31), Name(id='p2', ctx=Load(), lineno=400, col_offset=35)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=400, col_offset=55))], lineno=400, col_offset=15), op=Mult(), right=Name(id='unbase_scale', ctx=Load(), lineno=400, col_offset=64), lineno=400, col_offset=15), lineno=400, col_offset=8), Return(value=Call(func=Name(id='intr', ctx=Load(), lineno=402, col_offset=15), args=[Call(func=Name(id='max', ctx=Load(), lineno=402, col_offset=20), args=[Name(id='base', ctx=Load(), lineno=402, col_offset=24), Name(id='tsor', ctx=Load(), lineno=402, col_offset=30), Name(id='tser', ctx=Load(), lineno=402, col_offset=36)], keywords=[], lineno=402, col_offset=20)], keywords=[], lineno=402, col_offset=15), lineno=402, col_offset=8)], lineno=390, col_offset=4)], decorator_list=[], returns=None, lineno=327, col_offset=0), FunctionDef(name='UWRatio', args=arguments(args=[arg(arg='s1', annotation=None, lineno=405, col_offset=12), arg(arg='s2', annotation=None, lineno=405, col_offset=16), arg(arg='do_full_process', annotation=None, lineno=405, col_offset=20)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[NameConstant(value=True, lineno=405, col_offset=36)]), body=[Expr(value=Str(s="Return a measure of the sequences' similarity between 0 and 100,\n    using different algorithms. Same as WRatio but preserving unicode.\n    ", lineno=408, col_offset=-1), lineno=408, col_offset=-1), Return(value=Call(func=Name(id='WRatio', ctx=Load(), lineno=409, col_offset=11), args=[Name(id='s1', ctx=Load(), lineno=409, col_offset=18), Name(id='s2', ctx=Load(), lineno=409, col_offset=22)], keywords=[keyword(arg='force_ascii', value=NameConstant(value=False, lineno=409, col_offset=38)), keyword(arg='do_full_process', value=Name(id='do_full_process', ctx=Load(), lineno=409, col_offset=61))], lineno=409, col_offset=11), lineno=409, col_offset=4)], decorator_list=[], returns=None, lineno=405, col_offset=0), Assign(targets=[Name(id='default_scorer', ctx=Store(), lineno=411, col_offset=0)], value=Name(id='WRatio', ctx=Load(), lineno=411, col_offset=17), lineno=411, col_offset=0), Assign(targets=[Name(id='default_processor', ctx=Store(), lineno=414, col_offset=0)], value=Name(id='full_process', ctx=Load(), lineno=414, col_offset=20), lineno=414, col_offset=0), FunctionDef(name='extractWithoutOrder', args=arguments(args=[arg(arg='query', annotation=None, lineno=417, col_offset=24), arg(arg='choices', annotation=None, lineno=417, col_offset=31), arg(arg='processor', annotation=None, lineno=417, col_offset=40), arg(arg='scorer', annotation=None, lineno=417, col_offset=69), arg(arg='score_cutoff', annotation=None, lineno=417, col_offset=92)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Name(id='default_processor', ctx=Load(), lineno=417, col_offset=50), Name(id='default_scorer', ctx=Load(), lineno=417, col_offset=76), Num(n=0, lineno=417, col_offset=105)]), body=[Expr(value=Str(s="Select the best match in a list or dictionary of choices.\n\n    Find best matches in a list or dictionary of choices, return a\n    generator of tuples containing the match and its score. If a dictionary\n    is used, also returns the key for each match.\n\n    Arguments:\n        query: An object representing the thing we want to find.\n        choices: An iterable or dictionary-like object containing choices\n            to be matched against the query. Dictionary arguments of\n            {key: value} pairs will attempt to match the query against\n            each value.\n        processor: Optional function of the form f(a) -> b, where a is the query or\n            individual choice and b is the choice to be used in matching.\n\n            This can be used to match against, say, the first element of\n            a list:\n\n            lambda x: x[0]\n\n            Defaults to fuzzywuzzy.full_process().\n        scorer: Optional function for scoring matches between the query and\n            an individual processed choice. This should be a function\n            of the form f(query, choice) -> int.\n\n            By default, WRatio() is used and expects both query and\n            choice to be strings.\n        score_cutoff: Optional argument for score threshold. No matches with\n            a score less than this number will be returned. Defaults to 0.\n\n    Returns:\n        Generator of tuples containing the match and its score.\n\n        If a list is used for choices, then the result will be 2-tuples.\n        If a dictionary is used, then the result will be 3-tuples containing\n        the key for each match.\n\n        For example, searching for 'bird' in the dictionary\n\n        {'bard': 'train', 'dog': 'man'}\n\n        may return\n\n        ('train', 22, 'bard'), ('man', 0, 'dog')\n    ", lineno=462, col_offset=-1), lineno=462, col_offset=-1), FunctionDef(name='no_process', args=arguments(args=[arg(arg='x', annotation=None, lineno=464, col_offset=19)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Return(value=Name(id='x', ctx=Load(), lineno=465, col_offset=15), lineno=465, col_offset=8)], decorator_list=[], returns=None, lineno=464, col_offset=4), Try(body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='choices', ctx=Load(), lineno=468, col_offset=11), ops=[Is()], comparators=[NameConstant(value=None, lineno=468, col_offset=22)], lineno=468, col_offset=11), Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=468, col_offset=30), args=[Name(id='choices', ctx=Load(), lineno=468, col_offset=34)], keywords=[], lineno=468, col_offset=30), ops=[Eq()], comparators=[Num(n=0, lineno=468, col_offset=46)], lineno=468, col_offset=30)], lineno=468, col_offset=11), body=[Raise(exc=Name(id='StopIteration', ctx=Load(), lineno=469, col_offset=18), cause=None, lineno=469, col_offset=12)], orelse=[], lineno=468, col_offset=8)], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load(), lineno=470, col_offset=11), name=None, body=[Pass( lineno=471, col_offset=8)], lineno=470, col_offset=4)], orelse=[], finalbody=[], lineno=467, col_offset=4), If(test=Compare(left=Name(id='processor', ctx=Load(), lineno=475, col_offset=7), ops=[Is()], comparators=[NameConstant(value=None, lineno=475, col_offset=20)], lineno=475, col_offset=7), body=[Assign(targets=[Name(id='processor', ctx=Store(), lineno=476, col_offset=8)], value=Name(id='no_process', ctx=Load(), lineno=476, col_offset=20), lineno=476, col_offset=8)], orelse=[], lineno=475, col_offset=4), Assign(targets=[Name(id='processed_query', ctx=Store(), lineno=479, col_offset=4)], value=Call(func=Name(id='processor', ctx=Load(), lineno=479, col_offset=22), args=[Name(id='query', ctx=Load(), lineno=479, col_offset=32)], keywords=[], lineno=479, col_offset=22), lineno=479, col_offset=4), If(test=Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=481, col_offset=7), args=[Name(id='processed_query', ctx=Load(), lineno=481, col_offset=11)], keywords=[], lineno=481, col_offset=7), ops=[Eq()], comparators=[Num(n=0, lineno=481, col_offset=31)], lineno=481, col_offset=7), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load(), lineno=482, col_offset=8), attr='warning', ctx=Load(), lineno=482, col_offset=8), args=[Call(func=Attribute(value=Str(s="Applied processor reduces input query to empty string, all comparisons will have score 0. [Query: '{0}']", lineno=482, col_offset=24), attr='format', ctx=Load(), lineno=482, col_offset=24), args=[Name(id='query', ctx=Load(), lineno=484, col_offset=50)], keywords=[], lineno=482, col_offset=24)], keywords=[], lineno=482, col_offset=8), lineno=482, col_offset=8)], orelse=[], lineno=481, col_offset=4), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='scorer', ctx=Load(), lineno=487, col_offset=7), ops=[In()], comparators=[List(elts=[Name(id='WRatio', ctx=Load(), lineno=487, col_offset=18), Name(id='QRatio', ctx=Load(), lineno=487, col_offset=26), Name(id='token_set_ratio', ctx=Load(), lineno=488, col_offset=18), Name(id='token_sort_ratio', ctx=Load(), lineno=488, col_offset=35), Name(id='partial_token_set_ratio', ctx=Load(), lineno=489, col_offset=18), Name(id='partial_token_sort_ratio', ctx=Load(), lineno=489, col_offset=43), Name(id='UWRatio', ctx=Load(), lineno=490, col_offset=18), Name(id='UQRatio', ctx=Load(), lineno=490, col_offset=27)], ctx=Load(), lineno=487, col_offset=17)], lineno=487, col_offset=7), Compare(left=Name(id='processor', ctx=Load(), lineno=491, col_offset=16), ops=[Eq()], comparators=[Name(id='full_process', ctx=Load(), lineno=491, col_offset=29)], lineno=491, col_offset=16)], lineno=487, col_offset=7), body=[Assign(targets=[Name(id='processor', ctx=Store(), lineno=492, col_offset=8)], value=Name(id='no_process', ctx=Load(), lineno=492, col_offset=20), lineno=492, col_offset=8)], orelse=[], lineno=487, col_offset=4), If(test=Compare(left=Name(id='scorer', ctx=Load(), lineno=495, col_offset=7), ops=[In()], comparators=[List(elts=[Name(id='UWRatio', ctx=Load(), lineno=495, col_offset=18), Name(id='UQRatio', ctx=Load(), lineno=495, col_offset=27)], ctx=Load(), lineno=495, col_offset=17)], lineno=495, col_offset=7), body=[Assign(targets=[Name(id='pre_processor', ctx=Store(), lineno=496, col_offset=8)], value=Call(func=Name(id='partial', ctx=Load(), lineno=496, col_offset=24), args=[Name(id='full_process', ctx=Load(), lineno=496, col_offset=32)], keywords=[keyword(arg='force_ascii', value=NameConstant(value=False, lineno=496, col_offset=58))], lineno=496, col_offset=24), lineno=496, col_offset=8), Assign(targets=[Name(id='scorer', ctx=Store(), lineno=497, col_offset=8)], value=Call(func=Name(id='partial', ctx=Load(), lineno=497, col_offset=17), args=[Name(id='scorer', ctx=Load(), lineno=497, col_offset=25)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=497, col_offset=49))], lineno=497, col_offset=17), lineno=497, col_offset=8)], orelse=[If(test=Compare(left=Name(id='scorer', ctx=Load(), lineno=498, col_offset=9), ops=[In()], comparators=[List(elts=[Name(id='WRatio', ctx=Load(), lineno=498, col_offset=20), Name(id='QRatio', ctx=Load(), lineno=498, col_offset=28), Name(id='token_set_ratio', ctx=Load(), lineno=499, col_offset=20), Name(id='token_sort_ratio', ctx=Load(), lineno=499, col_offset=37), Name(id='partial_token_set_ratio', ctx=Load(), lineno=500, col_offset=20), Name(id='partial_token_sort_ratio', ctx=Load(), lineno=500, col_offset=45)], ctx=Load(), lineno=498, col_offset=19)], lineno=498, col_offset=9), body=[Assign(targets=[Name(id='pre_processor', ctx=Store(), lineno=501, col_offset=8)], value=Call(func=Name(id='partial', ctx=Load(), lineno=501, col_offset=24), args=[Name(id='full_process', ctx=Load(), lineno=501, col_offset=32)], keywords=[keyword(arg='force_ascii', value=NameConstant(value=True, lineno=501, col_offset=58))], lineno=501, col_offset=24), lineno=501, col_offset=8), Assign(targets=[Name(id='scorer', ctx=Store(), lineno=502, col_offset=8)], value=Call(func=Name(id='partial', ctx=Load(), lineno=502, col_offset=17), args=[Name(id='scorer', ctx=Load(), lineno=502, col_offset=25)], keywords=[keyword(arg='do_full_process', value=NameConstant(value=False, lineno=502, col_offset=49))], lineno=502, col_offset=17), lineno=502, col_offset=8)], orelse=[Assign(targets=[Name(id='pre_processor', ctx=Store(), lineno=504, col_offset=8)], value=Name(id='no_process', ctx=Load(), lineno=504, col_offset=24), lineno=504, col_offset=8)], lineno=498, col_offset=9)], lineno=495, col_offset=4), Assign(targets=[Name(id='processed_query', ctx=Store(), lineno=505, col_offset=4)], value=Call(func=Name(id='pre_processor', ctx=Load(), lineno=505, col_offset=22), args=[Name(id='processed_query', ctx=Load(), lineno=505, col_offset=36)], keywords=[], lineno=505, col_offset=22), lineno=505, col_offset=4), Try(body=[For(target=Tuple(elts=[Name(id='key', ctx=Store(), lineno=509, col_offset=12), Name(id='choice', ctx=Store(), lineno=509, col_offset=17)], ctx=Store(), lineno=509, col_offset=12), iter=Call(func=Attribute(value=Name(id='choices', ctx=Load(), lineno=509, col_offset=27), attr='items', ctx=Load(), lineno=509, col_offset=27), args=[], keywords=[], lineno=509, col_offset=27), body=[Assign(targets=[Name(id='processed', ctx=Store(), lineno=510, col_offset=12)], value=Call(func=Name(id='pre_processor', ctx=Load(), lineno=510, col_offset=24), args=[Call(func=Name(id='processor', ctx=Load(), lineno=510, col_offset=38), args=[Name(id='choice', ctx=Load(), lineno=510, col_offset=48)], keywords=[], lineno=510, col_offset=38)], keywords=[], lineno=510, col_offset=24), lineno=510, col_offset=12), Assign(targets=[Name(id='score', ctx=Store(), lineno=511, col_offset=12)], value=Call(func=Name(id='scorer', ctx=Load(), lineno=511, col_offset=20), args=[Name(id='processed_query', ctx=Load(), lineno=511, col_offset=27), Name(id='processed', ctx=Load(), lineno=511, col_offset=44)], keywords=[], lineno=511, col_offset=20), lineno=511, col_offset=12), If(test=Compare(left=Name(id='score', ctx=Load(), lineno=512, col_offset=15), ops=[GtE()], comparators=[Name(id='score_cutoff', ctx=Load(), lineno=512, col_offset=24)], lineno=512, col_offset=15), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='choice', ctx=Load(), lineno=513, col_offset=23), Name(id='score', ctx=Load(), lineno=513, col_offset=31), Name(id='key', ctx=Load(), lineno=513, col_offset=38)], ctx=Load(), lineno=513, col_offset=23), lineno=513, col_offset=16), lineno=513, col_offset=16)], orelse=[], lineno=512, col_offset=12)], orelse=[], lineno=509, col_offset=8)], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load(), lineno=514, col_offset=11), name=None, body=[For(target=Name(id='choice', ctx=Store(), lineno=516, col_offset=12), iter=Name(id='choices', ctx=Load(), lineno=516, col_offset=22), body=[Assign(targets=[Name(id='processed', ctx=Store(), lineno=517, col_offset=12)], value=Call(func=Name(id='pre_processor', ctx=Load(), lineno=517, col_offset=24), args=[Call(func=Name(id='processor', ctx=Load(), lineno=517, col_offset=38), args=[Name(id='choice', ctx=Load(), lineno=517, col_offset=48)], keywords=[], lineno=517, col_offset=38)], keywords=[], lineno=517, col_offset=24), lineno=517, col_offset=12), Assign(targets=[Name(id='score', ctx=Store(), lineno=518, col_offset=12)], value=Call(func=Name(id='scorer', ctx=Load(), lineno=518, col_offset=20), args=[Name(id='processed_query', ctx=Load(), lineno=518, col_offset=27), Name(id='processed', ctx=Load(), lineno=518, col_offset=44)], keywords=[], lineno=518, col_offset=20), lineno=518, col_offset=12), If(test=Compare(left=Name(id='score', ctx=Load(), lineno=519, col_offset=15), ops=[GtE()], comparators=[Name(id='score_cutoff', ctx=Load(), lineno=519, col_offset=24)], lineno=519, col_offset=15), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='choice', ctx=Load(), lineno=520, col_offset=23), Name(id='score', ctx=Load(), lineno=520, col_offset=31)], ctx=Load(), lineno=520, col_offset=23), lineno=520, col_offset=16), lineno=520, col_offset=16)], orelse=[], lineno=519, col_offset=12)], orelse=[], lineno=516, col_offset=8)], lineno=514, col_offset=4)], orelse=[], finalbody=[], lineno=507, col_offset=4)], decorator_list=[], returns=None, lineno=417, col_offset=0), FunctionDef(name='extract', args=arguments(args=[arg(arg='query', annotation=None, lineno=523, col_offset=12), arg(arg='choices', annotation=None, lineno=523, col_offset=19), arg(arg='processor', annotation=None, lineno=523, col_offset=28), arg(arg='scorer', annotation=None, lineno=523, col_offset=57), arg(arg='limit', annotation=None, lineno=523, col_offset=80)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Name(id='default_processor', ctx=Load(), lineno=523, col_offset=38), Name(id='default_scorer', ctx=Load(), lineno=523, col_offset=64), Num(n=5, lineno=523, col_offset=86)]), body=[Expr(value=Str(s="Select the best match in a list or dictionary of choices.\n\n    Find best matches in a list or dictionary of choices, return a\n    list of tuples containing the match and its score. If a dictionary\n    is used, also returns the key for each match.\n\n    Arguments:\n        query: An object representing the thing we want to find.\n        choices: An iterable or dictionary-like object containing choices\n            to be matched against the query. Dictionary arguments of\n            {key: value} pairs will attempt to match the query against\n            each value.\n        processor: Optional function of the form f(a) -> b, where a is the query or\n            individual choice and b is the choice to be used in matching.\n\n            This can be used to match against, say, the first element of\n            a list:\n\n            lambda x: x[0]\n\n            Defaults to fuzzywuzzy.full_process().\n        scorer: Optional function for scoring matches between the query and\n            an individual processed choice. This should be a function\n            of the form f(query, choice) -> int.\n            By default, WRatio() is used and expects both query and\n            choice to be strings.\n        limit: Optional maximum for the number of elements returned. Defaults\n            to 5.\n\n    Returns:\n        List of tuples containing the match and its score.\n\n        If a list is used for choices, then the result will be 2-tuples.\n        If a dictionary is used, then the result will be 3-tuples containing\n        the key for each match.\n\n        For example, searching for 'bird' in the dictionary\n\n        {'bard': 'train', 'dog': 'man'}\n\n        may return\n\n        [('train', 22, 'bard'), ('man', 0, 'dog')]\n    ", lineno=567, col_offset=-1), lineno=567, col_offset=-1), Assign(targets=[Name(id='sl', ctx=Store(), lineno=568, col_offset=4)], value=Call(func=Name(id='extractWithoutOrder', ctx=Load(), lineno=568, col_offset=9), args=[Name(id='query', ctx=Load(), lineno=568, col_offset=29), Name(id='choices', ctx=Load(), lineno=568, col_offset=36), Name(id='processor', ctx=Load(), lineno=568, col_offset=45), Name(id='scorer', ctx=Load(), lineno=568, col_offset=56)], keywords=[], lineno=568, col_offset=9), lineno=568, col_offset=4), Return(value=IfExp(test=Compare(left=Name(id='limit', ctx=Load(), lineno=569, col_offset=60), ops=[IsNot()], comparators=[NameConstant(value=None, lineno=569, col_offset=73)], lineno=569, col_offset=60), body=Call(func=Attribute(value=Name(id='heapq', ctx=Load(), lineno=569, col_offset=11), attr='nlargest', ctx=Load(), lineno=569, col_offset=11), args=[Name(id='limit', ctx=Load(), lineno=569, col_offset=26), Name(id='sl', ctx=Load(), lineno=569, col_offset=33)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='i', annotation=None, lineno=569, col_offset=48)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='i', ctx=Load(), lineno=569, col_offset=51), slice=Index(value=Num(n=1, lineno=569, col_offset=53)), ctx=Load(), lineno=569, col_offset=51), lineno=569, col_offset=41))], lineno=569, col_offset=11), orelse=Call(func=Name(id='sorted', ctx=Load(), lineno=570, col_offset=8), args=[Name(id='sl', ctx=Load(), lineno=570, col_offset=15)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='i', annotation=None, lineno=570, col_offset=30)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='i', ctx=Load(), lineno=570, col_offset=33), slice=Index(value=Num(n=1, lineno=570, col_offset=35)), ctx=Load(), lineno=570, col_offset=33), lineno=570, col_offset=23)), keyword(arg='reverse', value=NameConstant(value=True, lineno=570, col_offset=47))], lineno=570, col_offset=8), lineno=569, col_offset=11), lineno=569, col_offset=4)], decorator_list=[], returns=None, lineno=523, col_offset=0), FunctionDef(name='extractBests', args=arguments(args=[arg(arg='query', annotation=None, lineno=573, col_offset=17), arg(arg='choices', annotation=None, lineno=573, col_offset=24), arg(arg='processor', annotation=None, lineno=573, col_offset=33), arg(arg='scorer', annotation=None, lineno=573, col_offset=62), arg(arg='score_cutoff', annotation=None, lineno=573, col_offset=85), arg(arg='limit', annotation=None, lineno=573, col_offset=101)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Name(id='default_processor', ctx=Load(), lineno=573, col_offset=43), Name(id='default_scorer', ctx=Load(), lineno=573, col_offset=69), Num(n=0, lineno=573, col_offset=98), Num(n=5, lineno=573, col_offset=107)]), body=[Expr(value=Str(s='Get a list of the best matches to a collection of choices.\n\n    Convenience function for getting the choices with best scores.\n\n    Args:\n        query: A string to match against\n        choices: A list or dictionary of choices, suitable for use with\n            extract().\n        processor: Optional function for transforming choices before matching.\n            See extract().\n        scorer: Scoring function for extract().\n        score_cutoff: Optional argument for score threshold. No matches with\n            a score less than this number will be returned. Defaults to 0.\n        limit: Optional maximum for the number of elements returned. Defaults\n            to 5.\n\n    Returns: A a list of (match, score) tuples.\n    ', lineno=591, col_offset=-1), lineno=591, col_offset=-1), Assign(targets=[Name(id='best_list', ctx=Store(), lineno=593, col_offset=4)], value=Call(func=Name(id='extractWithoutOrder', ctx=Load(), lineno=593, col_offset=16), args=[Name(id='query', ctx=Load(), lineno=593, col_offset=36), Name(id='choices', ctx=Load(), lineno=593, col_offset=43), Name(id='processor', ctx=Load(), lineno=593, col_offset=52), Name(id='scorer', ctx=Load(), lineno=593, col_offset=63), Name(id='score_cutoff', ctx=Load(), lineno=593, col_offset=71)], keywords=[], lineno=593, col_offset=16), lineno=593, col_offset=4), Return(value=IfExp(test=Compare(left=Name(id='limit', ctx=Load(), lineno=594, col_offset=67), ops=[IsNot()], comparators=[NameConstant(value=None, lineno=594, col_offset=80)], lineno=594, col_offset=67), body=Call(func=Attribute(value=Name(id='heapq', ctx=Load(), lineno=594, col_offset=11), attr='nlargest', ctx=Load(), lineno=594, col_offset=11), args=[Name(id='limit', ctx=Load(), lineno=594, col_offset=26), Name(id='best_list', ctx=Load(), lineno=594, col_offset=33)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='i', annotation=None, lineno=594, col_offset=55)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='i', ctx=Load(), lineno=594, col_offset=58), slice=Index(value=Num(n=1, lineno=594, col_offset=60)), ctx=Load(), lineno=594, col_offset=58), lineno=594, col_offset=48))], lineno=594, col_offset=11), orelse=Call(func=Name(id='sorted', ctx=Load(), lineno=595, col_offset=8), args=[Name(id='best_list', ctx=Load(), lineno=595, col_offset=15)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='i', annotation=None, lineno=595, col_offset=37)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='i', ctx=Load(), lineno=595, col_offset=40), slice=Index(value=Num(n=1, lineno=595, col_offset=42)), ctx=Load(), lineno=595, col_offset=40), lineno=595, col_offset=30)), keyword(arg='reverse', value=NameConstant(value=True, lineno=595, col_offset=54))], lineno=595, col_offset=8), lineno=594, col_offset=11), lineno=594, col_offset=4)], decorator_list=[], returns=None, lineno=573, col_offset=0), FunctionDef(name='extractOne', args=arguments(args=[arg(arg='query', annotation=None, lineno=598, col_offset=15), arg(arg='choices', annotation=None, lineno=598, col_offset=22), arg(arg='processor', annotation=None, lineno=598, col_offset=31), arg(arg='scorer', annotation=None, lineno=598, col_offset=60), arg(arg='score_cutoff', annotation=None, lineno=598, col_offset=83)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Name(id='default_processor', ctx=Load(), lineno=598, col_offset=41), Name(id='default_scorer', ctx=Load(), lineno=598, col_offset=67), Num(n=0, lineno=598, col_offset=96)]), body=[Expr(value=Str(s='Find the single best match above a score in a list of choices.\n\n    This is a convenience method which returns the single best choice.\n    See extract() for the full arguments list.\n\n    Args:\n        query: A string to match against\n        choices: A list or dictionary of choices, suitable for use with\n            extract().\n        processor: Optional function for transforming choices before matching.\n            See extract().\n        scorer: Scoring function for extract().\n        score_cutoff: Optional argument for score threshold. If the best\n            match is found, but it is not greater than this number, then\n            return None anyway ("not a good enough match").  Defaults to 0.\n\n    Returns:\n        A tuple containing a single match and its score, if a match\n        was found that was above score_cutoff. Otherwise, returns None.\n    ', lineno=618, col_offset=-1), lineno=618, col_offset=-1), Assign(targets=[Name(id='best_list', ctx=Store(), lineno=619, col_offset=4)], value=Call(func=Name(id='extractWithoutOrder', ctx=Load(), lineno=619, col_offset=16), args=[Name(id='query', ctx=Load(), lineno=619, col_offset=36), Name(id='choices', ctx=Load(), lineno=619, col_offset=43), Name(id='processor', ctx=Load(), lineno=619, col_offset=52), Name(id='scorer', ctx=Load(), lineno=619, col_offset=63), Name(id='score_cutoff', ctx=Load(), lineno=619, col_offset=71)], keywords=[], lineno=619, col_offset=16), lineno=619, col_offset=4), Try(body=[Return(value=Call(func=Name(id='max', ctx=Load(), lineno=621, col_offset=15), args=[Name(id='best_list', ctx=Load(), lineno=621, col_offset=19)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='i', annotation=None, lineno=621, col_offset=41)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='i', ctx=Load(), lineno=621, col_offset=44), slice=Index(value=Num(n=1, lineno=621, col_offset=46)), ctx=Load(), lineno=621, col_offset=44), lineno=621, col_offset=34))], lineno=621, col_offset=15), lineno=621, col_offset=8)], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load(), lineno=622, col_offset=11), name=None, body=[Return(value=NameConstant(value=None, lineno=623, col_offset=15), lineno=623, col_offset=8)], lineno=622, col_offset=4)], orelse=[], finalbody=[], lineno=620, col_offset=4)], decorator_list=[], returns=None, lineno=598, col_offset=0), FunctionDef(name='dedupe', args=arguments(args=[arg(arg='contains_dupes', annotation=None, lineno=626, col_offset=11), arg(arg='threshold', annotation=None, lineno=626, col_offset=27), arg(arg='scorer', annotation=None, lineno=626, col_offset=41)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[Num(n=70, lineno=626, col_offset=37), Name(id='token_set_ratio', ctx=Load(), lineno=626, col_offset=48)]), body=[Expr(value=Str(s="This convenience function takes a list of strings containing duplicates and uses fuzzy matching to identify\n    and remove duplicates. Specifically, it uses the process.extract to identify duplicates that\n    score greater than a user defined threshold. Then, it looks for the longest item in the duplicate list\n    since we assume this item contains the most entity information and returns that. It breaks string\n    length ties on an alphabetical sort.\n\n    Note: as the threshold DECREASES the number of duplicates that are found INCREASES. This means that the\n        returned deduplicated list will likely be shorter. Raise the threshold for fuzzy_dedupe to be less\n        sensitive.\n\n    Args:\n        contains_dupes: A list of strings that we would like to dedupe.\n        threshold: the numerical value (0,100) point at which we expect to find duplicates.\n            Defaults to 70 out of 100\n        scorer: Optional function for scoring matches between the query and\n            an individual processed choice. This should be a function\n            of the form f(query, choice) -> int.\n            By default, token_set_ratio() is used and expects both query and\n            choice to be strings.\n\n    Returns:\n        A deduplicated list. For example:\n\n            In: contains_dupes = ['Frodo Baggin', 'Frodo Baggins', 'F. Baggins', 'Samwise G.', 'Gandalf', 'Bilbo Baggins']\n            In: fuzzy_dedupe(contains_dupes)\n            Out: ['Frodo Baggins', 'Samwise G.', 'Bilbo Baggins', 'Gandalf']\n        ", lineno=653, col_offset=-1), lineno=653, col_offset=-1), Assign(targets=[Name(id='extractor', ctx=Store(), lineno=655, col_offset=4)], value=List(elts=[], ctx=Load(), lineno=655, col_offset=16), lineno=655, col_offset=4), For(target=Name(id='item', ctx=Store(), lineno=658, col_offset=8), iter=Name(id='contains_dupes', ctx=Load(), lineno=658, col_offset=16), body=[Assign(targets=[Name(id='matches', ctx=Store(), lineno=660, col_offset=8)], value=Call(func=Name(id='extract', ctx=Load(), lineno=660, col_offset=18), args=[Name(id='item', ctx=Load(), lineno=660, col_offset=26), Name(id='contains_dupes', ctx=Load(), lineno=660, col_offset=32)], keywords=[keyword(arg='limit', value=NameConstant(value=None, lineno=660, col_offset=54)), keyword(arg='scorer', value=Name(id='scorer', ctx=Load(), lineno=660, col_offset=67))], lineno=660, col_offset=18), lineno=660, col_offset=8), Assign(targets=[Name(id='filtered', ctx=Store(), lineno=662, col_offset=8)], value=ListComp(elt=Name(id='x', ctx=Load(), lineno=662, col_offset=20), generators=[comprehension(target=Name(id='x', ctx=Store(), lineno=662, col_offset=26), iter=Name(id='matches', ctx=Load(), lineno=662, col_offset=31), ifs=[Compare(left=Subscript(value=Name(id='x', ctx=Load(), lineno=662, col_offset=42), slice=Index(value=Num(n=1, lineno=662, col_offset=44)), ctx=Load(), lineno=662, col_offset=42), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load(), lineno=662, col_offset=49)], lineno=662, col_offset=42)])], lineno=662, col_offset=20), lineno=662, col_offset=8), If(test=Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=664, col_offset=11), args=[Name(id='filtered', ctx=Load(), lineno=664, col_offset=15)], keywords=[], lineno=664, col_offset=11), ops=[Eq()], comparators=[Num(n=1, lineno=664, col_offset=28)], lineno=664, col_offset=11), body=[Expr(value=Call(func=Attribute(value=Name(id='extractor', ctx=Load(), lineno=665, col_offset=12), attr='append', ctx=Load(), lineno=665, col_offset=12), args=[Subscript(value=Subscript(value=Name(id='filtered', ctx=Load(), lineno=665, col_offset=29), slice=Index(value=Num(n=0, lineno=665, col_offset=38)), ctx=Load(), lineno=665, col_offset=29), slice=Index(value=Num(n=0, lineno=665, col_offset=41)), ctx=Load(), lineno=665, col_offset=29)], keywords=[], lineno=665, col_offset=12), lineno=665, col_offset=12)], orelse=[Assign(targets=[Name(id='filtered', ctx=Store(), lineno=669, col_offset=12)], value=Call(func=Name(id='sorted', ctx=Load(), lineno=669, col_offset=23), args=[Name(id='filtered', ctx=Load(), lineno=669, col_offset=30)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='x', annotation=None, lineno=669, col_offset=51)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Subscript(value=Name(id='x', ctx=Load(), lineno=669, col_offset=54), slice=Index(value=Num(n=0, lineno=669, col_offset=56)), ctx=Load(), lineno=669, col_offset=54), lineno=669, col_offset=44))], lineno=669, col_offset=23), lineno=669, col_offset=12), Assign(targets=[Name(id='filter_sort', ctx=Store(), lineno=671, col_offset=12)], value=Call(func=Name(id='sorted', ctx=Load(), lineno=671, col_offset=26), args=[Name(id='filtered', ctx=Load(), lineno=671, col_offset=33)], keywords=[keyword(arg='key', value=Lambda(args=arguments(args=[arg(arg='x', annotation=None, lineno=671, col_offset=54)], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Call(func=Name(id='len', ctx=Load(), lineno=671, col_offset=57), args=[Subscript(value=Name(id='x', ctx=Load(), lineno=671, col_offset=61), slice=Index(value=Num(n=0, lineno=671, col_offset=63)), ctx=Load(), lineno=671, col_offset=61)], keywords=[], lineno=671, col_offset=57), lineno=671, col_offset=47)), keyword(arg='reverse', value=NameConstant(value=True, lineno=671, col_offset=76))], lineno=671, col_offset=26), lineno=671, col_offset=12), Expr(value=Call(func=Attribute(value=Name(id='extractor', ctx=Load(), lineno=673, col_offset=12), attr='append', ctx=Load(), lineno=673, col_offset=12), args=[Subscript(value=Subscript(value=Name(id='filter_sort', ctx=Load(), lineno=673, col_offset=29), slice=Index(value=Num(n=0, lineno=673, col_offset=41)), ctx=Load(), lineno=673, col_offset=29), slice=Index(value=Num(n=0, lineno=673, col_offset=44)), ctx=Load(), lineno=673, col_offset=29)], keywords=[], lineno=673, col_offset=12), lineno=673, col_offset=12)], lineno=664, col_offset=8)], orelse=[], lineno=658, col_offset=4), Assign(targets=[Name(id='keys', ctx=Store(), lineno=676, col_offset=4)], value=Dict(keys=[], values=[], lineno=676, col_offset=11), lineno=676, col_offset=4), For(target=Name(id='e', ctx=Store(), lineno=677, col_offset=8), iter=Name(id='extractor', ctx=Load(), lineno=677, col_offset=13), body=[Assign(targets=[Subscript(value=Name(id='keys', ctx=Load(), lineno=678, col_offset=8), slice=Index(value=Name(id='e', ctx=Load(), lineno=678, col_offset=13)), ctx=Store(), lineno=678, col_offset=8)], value=Num(n=1, lineno=678, col_offset=18), lineno=678, col_offset=8)], orelse=[], lineno=677, col_offset=4), Assign(targets=[Name(id='extractor', ctx=Store(), lineno=679, col_offset=4)], value=Call(func=Attribute(value=Name(id='keys', ctx=Load(), lineno=679, col_offset=16), attr='keys', ctx=Load(), lineno=679, col_offset=16), args=[], keywords=[], lineno=679, col_offset=16), lineno=679, col_offset=4), If(test=Compare(left=Call(func=Name(id='len', ctx=Load(), lineno=683, col_offset=7), args=[Name(id='extractor', ctx=Load(), lineno=683, col_offset=11)], keywords=[], lineno=683, col_offset=7), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load(), lineno=683, col_offset=25), args=[Name(id='contains_dupes', ctx=Load(), lineno=683, col_offset=29)], keywords=[], lineno=683, col_offset=25)], lineno=683, col_offset=7), body=[Return(value=Name(id='contains_dupes', ctx=Load(), lineno=684, col_offset=15), lineno=684, col_offset=8)], orelse=[Return(value=Name(id='extractor', ctx=Load(), lineno=686, col_offset=15), lineno=686, col_offset=8)], lineno=683, col_offset=4)], decorator_list=[], returns=None, lineno=626, col_offset=0)])
